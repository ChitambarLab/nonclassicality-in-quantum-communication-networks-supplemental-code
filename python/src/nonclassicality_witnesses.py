import numpy as np
import math


def finger_printing_matrix(num_senders, num_in):
    """Constructs the matrix containing the winning answers
    for the finger printing game.
    """
    ineq_tensor = np.zeros([num_in]*num_senders)
    match_ids = np.diag_indices(num_in, num_senders)
    
    ineq_tensor[match_ids] = [1] * num_in
    
    success_row = ineq_tensor.reshape(num_in**num_senders)
    error_row = [ (el + 1) % 2 for el in success_row]
        
    return np.array([success_row, error_row])


def bisender_mac_bounds():
    return [
        (4, np.array([[0,0,0,0,1,0,1,0,0],[1,1,0,1,0,0,0,0,0]])),
        (4, np.array([[0,0,1,0,1,0,0,0,0],[1,1,0,1,0,0,0,0,0]])),
        (5, np.array([[0,0,0,0,0,1,1,0,0],[1,1,0,1,0,0,0,1,0]])),
        (5, np.array([[0,0,0,0,1,0,0,0,1],[1,1,0,1,0,1,0,0,0]])),
        (7, np.array([[0,0,1,0,1,0,1,0,0],[2,1,0,1,0,1,0,1,0]])),
        (7, np.array([[0,0,1,0,1,0,1,0,0],[2,2,0,1,0,0,0,1,0]])),
        (7, np.array([[0,0,1,0,1,0,1,0,0],[2,1,0,2,0,1,0,0,0]])),
        (6, np.array([[0,0,0,0,1,1,1,0,1],[1,1,0,1,0,0,0,1,0]])),
        (8, np.array([[0,0,0,0,1,1,2,0,0],[2,2,0,1,0,0,0,1,0]])),
        (8, np.array([[0,0,0,0,2,0,1,0,1],[2,2,0,1,0,1,0,0,0]])),
        (8, np.array([[0,0,1,0,2,0,0,0,1],[2,1,0,2,0,1,0,0,0]])),
        (8, np.array([[0,0,1,0,2,0,0,0,1],[2,1,0,2,0,0,0,1,0]])),
        (8, np.array([[0,0,1,0,1,0,2,0,0],[2,1,0,0,0,1,0,2,0]])),
        (10, np.array([[0,0,1,0,2,0,1,0,1],[3,2,0,2,0,1,0,0,0]])),
        (10, np.array([[0,0,1,0,2,0,1,0,1],[3,2,0,2,0,0,0,1,0]])),
        (11, np.array([[0,0,2,0,1,0,2,0,0],[3,1,0,1,0,2,0,2,0]])),
        (14, np.array([[0,0,2,0,2,0,2,0,0],[3,1,0,1,0,3,0,3,1]])),
        (16, np.array([[0,0,2,0,3,0,2,0,1],[5,3,0,3,0,1,0,1,0]])),
        (17, np.array([[0,0,2,1,2,0,5,0,1],[4,2,0,0,0,1,0,4,0]])),
    ]

def bisender_mac_qubit_simulation_games():
    return [
        (7, np.array([ # diff game
            [1,0,0,0,1,0,0,0,1],
            [0,1,0,1,0,1,0,1,0],
            [0,0,1,0,0,0,1,0,0],
        ])),
        (10, np.array([ # diff game with quadrits
            [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],
            [0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0],
            [0,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0],
            [0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0],
        ])),
        (8, np.array([ # xor game with perfect eaqc score
            [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],
            [0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0],
            [0,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0],
            [0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0],
        ])),
        (7, np.array([ # compare game 3 inputs
            [1,0,0,0,1,0,0,0,1],
            [0,1,1,0,0,1,0,0,0],
            [0,0,0,1,0,0,1,1,0],
        ])),
        (12 , np.array([  # compare game 4 inputs
            [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
            [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0],
        ])),
        (8 , np.array([ # compare game with 2 outputs 3 inputs
            [1, 0, 0, 1, 1, 0, 1, 1, 1],
            [0, 1, 1, 0, 0, 1, 0, 0, 0],
        ])),
        (14, np.array([  # compare game with two outputs and 4 inputs
            [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1],
            [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0],
        ])),
        (7, np.array([ # 33->2 finger printing
            [1,0,0,0,1,0,0,0,1],
            [0,1,1,1,0,1,1,1,0],
        ])),
        (13, np.array([  # 44->2 finger printing
            [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],
            [0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0],
        ])),
    ]

def bipartite_broadcast_bounds():
    return [
        (1, np.array([[0,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0],[1,0,0]])),
        (2, np.array([[0, 0, 1],[0, 0, 0],[1, 0, 0],[0, 0, 0],[0, 1, 0],[1, 0, 0],[1, 0, 0],[1, 0, 0],[1, 0, 0]])),
        (2, np.array([[0, 0, 1],[0, 0, 1],[0, 0, 1],[0, 1, 0],[0, 1, 0],[0, 1, 0],[1, 0, 0],[1, 0, 0],[1, 0, 0]])),
        (2, np.array([[0, 0, 1],[0, 1, 0],[1, 0, 0],[0, 0, 1],[0, 1, 0],[1, 0, 0],[0, 0, 1],[0, 1, 0],[1, 0, 0]])),
        (2, np.array([[0, 0, 1],[0, 0, 0],[0, 0, 0],[0, 0, 0],[1, 0, 0],[0, 1, 0],[0, 0, 0],[0, 1, 0],[1, 0, 0]])),
        (4, np.array([[0, 0, 2],[0, 0, 1],[0, 1, 1],[0, 2, 0],[0, 1, 0],[0, 1, 1],[1, 0, 0],[2, 0, 0],[1, 1, 1]])),
        (4, np.array([[0, 0, 2],[0, 2, 0],[1, 0, 0],[0, 0, 1],[0, 1, 0],[2, 0, 0],[0, 1, 1],[0, 1, 1],[1, 1, 1]])),
    ]

def qubit_signaling_dimension_bounds():
    return [
        (2, np.array([[1,0,0],[1,0,0],[0,1,0],[0,0,1]])),
        (2, np.eye(4)),
        (3, np.array([[1,1,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,1]])),
        (4, np.array([[2,0,0],[0,2,0],[0,0,2],[1,1,1]])),
        (4, np.array([[2,0,0,0],[0,2,0,0],[0,0,1,1],[1,1,1,0]])),
        (4, np.array([[2,0,0,0,0],[0,1,0,1,0],[0,0,1,0,1],[1,1,1,0,0]])),
        (4, np.array([[1,0,0,1,0,0],[0,1,0,0,1,0],[0,0,1,0,0,1],[1,1,1,0,0,0]])),
        (5, np.array([[1,1,1,0,0,0],[1,0,0,1,1,0],[0,1,0,1,0,1],[0,0,1,0,1,1]])),
    ]

def interference_33_33_network_bounds():
    interference_game_inequalities = [
        (7, np.array([ # multiplication with zero 
            [1, 1, 1, 1, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])),
        (5 , np.array([ # multiplication game [1,2,3] no zero mult1
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
        ])),
        (4, np.array([ # swap game
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
        ])),
        (5, np.array([ # adder game
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 1, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])),
        (6, np.array([ # compare game
            [1, 0, 0, 0, 1, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])),
        (4, np.array([ # one receiver permutes output based on other receiver
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 0],
        ])),
        (7, np.array([ # same difference game
            [1, 0, 0, 0, 1, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 1, 0, 0],
        ])),
        (4, np.eye(9)), # communication value
    ]
    
    interference_facet_inequalities = [
        (13, np.array([ # mult zero facet
            [1,  2,  1,  3,  0,  1,  0,  0,  1],
            [1,  0,  0,  1,  3,  0,  0,  1,  2],
            [1,  0,  0,  1,  1,  3,  0,  2,  0],
            [0,  1,  1,  0,  1,  2,  1,  1,  2],
            [0,  1,  1,  0,  1,  2,  1,  1,  2],
            [0,  1,  1,  1,  1,  2,  1,  1,  2],
            [1,  0,  0,  1,  3,  1,  0,  0,  2],
            [1,  1,  0,  1,  1,  2,  0,  1,  2],
            [1,  1,  1,  2,  2,  2,  1,  1,  1],
        ])),
        (14, np.array([ # mult 1 facet
            [3,  0,  1,  0,  2,  1,  1,  0,  1],
            [0,  3,  0,  2,  0,  0,  1,  0,  1],
            [0,  0,  4,  0,  2,  1,  2,  0,  0],
            [2,  1,  2,  0,  2,  1,  0,  1,  1],
            [2,  1,  2,  1,  1,  2,  0,  1,  1],
            [2,  1,  2,  0,  0,  3,  0,  2,  0],
            [2,  1,  2,  0,  2,  1,  0,  0,  1],
            [2,  1,  2,  0,  2,  1,  0,  0,  1],
            [2,  2,  3,  1,  1,  2,  1,  1,  0],
        ])),
        (13, np.array([ # swap facet
            [3,  0,  0,  0,  2,  0,  1,  0,  1],
            [1,  1,  2,  2,  0,  0,  1,  0,  1],
            [0,  1,  3,  0,  1,  1,  2,  0,  0],
            [0,  3,  0,  2,  0,  0,  0,  1,  1],
            [1,  1,  2,  0,  2,  0,  0,  1,  1],
            [1,  0,  3,  1,  0,  1,  0,  2,  0],
            [0,  0,  4,  1,  1,  0,  1,  1,  0],
            [1,  2,  2,  0,  0,  2,  1,  1,  0],
            [2,  2,  3,  1,  1,  1,  1,  1,  0],
        ])),
        (14, np.array([ # adder facet
            [3,  0,  1,  0,  2,  1,  1,  0,  1],
            [0,  3,  0,  2,  0,  0,  1,  0,  1],
            [0,  0,  4,  0,  2,  1,  2,  0,  0],
            [2,  1,  2,  0,  0,  3,  0,  2,  0],
            [1,  0,  3,  1,  1,  2,  1,  1,  1],
            [1,  2,  2,  1,  1,  2,  0,  1,  1],
            [2,  1,  2,  0,  2,  1,  0,  0,  1],
            [1,  1,  3,  0,  2,  1,  1,  0,  1],
            [2,  2,  3,  1,  1,  2,  1,  1,  0],
        ])),
        (12, np.array([ # compare facet
            [2,  0,  0,  0,  3,  0,  0,  0,  1],
            [0,  1,  1,  1,  0,  3,  1,  1,  0],
            [1,  1,  1,  0,  0,  3,  0,  1,  0],
            [0,  2,  1,  0,  2,  2,  1,  0,  1],
            [1,  1,  1,  0,  0,  3,  1,  1,  0],
            [0,  3,  1,  0,  1,  3,  1,  0,  0],
            [1,  2,  1,  1,  1,  2,  0,  0,  1],
            [0,  1,  2,  2,  0,  1,  1,  1,  0],
            [1,  2,  2,  1,  2,  2,  1,  0,  0],
        ])),
        (13, np.array([ # conditioned permutation facet
            [3,  0,  0,  0,  1,  1,  0,  1,  1],
            [0,  3,  2,  1,  0,  1,  0,  0,  1],
            [0,  0,  4,  1,  1,  1,  0,  1,  0],
            [1,  1,  2,  1,  2,  0,  0,  1,  1],
            [1,  2,  2,  1,  0,  3,  0,  1,  0],
            [1,  2,  2,  2,  0,  0,  0,  0,  1],
            [1,  2,  2,  1,  1,  1,  0,  1,  1],
            [0,  1,  3,  0,  1,  2,  1,  0,  0],
            [2,  2,  3,  1,  1,  2,  0,  1,  0],
        ])),
        (11, np.array([ # same difference facet
            [2,  0,  0,  0,  2,  0,  1,  0,  1],
            [0,  0,  2,  1,  1,  2,  1,  0,  1],
            [1,  0,  2,  0,  0,  2,  1,  0,  1],
            [0,  0,  2,  1,  1,  2,  1,  0,  1],
            [0,  0,  2,  2,  0,  2,  0,  1,  0],
            [0,  0,  2,  2,  1,  2,  0,  0,  1],
            [1,  0,  2,  0,  0,  2,  1,  0,  1],
            [0,  0,  2,  2,  1,  2,  0,  0,  1],
            [1,  1,  3,  1,  1,  2,  1,  0,  0],
        ])),
        (13, np.array([ # cv facet
            [3,  0,  0,  0,  2,  0,  1,  0,  1],
            [0,  3,  0,  2,  0,  0,  0,  1,  1],
            [0,  0,  4,  1,  1,  0,  1,  1,  0],
            [1,  1,  2,  2,  0,  0,  1,  0,  1],
            [1,  1,  2,  0,  2,  0,  0,  1,  1],
            [1,  2,  2,  0,  0,  2,  1,  1,  0],
            [0,  1,  3,  0,  1,  1,  2,  0,  0],
            [1,  0,  3,  1,  0,  1,  0,  2,  0],
            [2,  2,  3,  1,  1,  1,  1,  1,  0],
        ])),
    ]

    game_names = ["mult0", "mult1", "swap", "adder", "compare", "perm", "diff", "cv"]

    return interference_game_inequalities, interference_facet_inequalities, game_names


def interference2_33_33_network_bounds():
    interference2_game_inequalities = [
        (7, np.array([ # multiplication with zero 
            [1, 1, 1, 1, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])),
        (4 , np.array([ # multiplication game [1,2,3] no zero mult1
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
        ])),
        (2, np.array([ # swap game
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
        ])),
        (5, np.array([ # adder game
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 1, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])),
        (6, np.array([ # compare game
            [1, 0, 0, 0, 1, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])),
        (2, np.array([ # one receiver permutes output based on other receiver
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 0],
        ])),
        (7, np.array([ # same difference game
            [1, 0, 0, 0, 1, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 1, 0, 0],
        ])),
        (2, np.eye(9)), # communication value
    ]
    
    interference2_facet_inequalities = [
        (12, np.array([ # mult 0 facet
            [1,  2,  2,  1,  0,  0,  0,  0,  1],
            [0,  0,  1,  0,  3,  0,  1,  2,  1],
            [0,  0,  0,  0,  0,  3,  1,  3,  0],
            [0,  1,  2,  0,  1,  2,  1,  2,  1],
            [0,  1,  2,  0,  1,  2,  1,  2,  1],
            [0,  1,  2,  0,  1,  2,  1,  2,  1],
            [0,  1,  2,  0,  1,  2,  1,  2,  1],
            [0,  1,  2,  0,  1,  2,  1,  2,  1],
            [1,  1,  2,  0,  2,  2,  1,  2,  0],
        ])),
        (13, np.array([ # mult 1 facet
            [4,  0,  1,  1,  0,  2,  0,  0,  1],
            [1,  3,  0,  3,  0,  0,  0,  0,  1],
            [0,  0,  3,  0,  2,  1,  1,  0,  0],
            [2,  1,  1,  2,  2,  1,  0,  0,  1],
            [2,  1,  2,  2,  1,  2,  0,  0,  1],
            [2,  1,  1,  2,  0,  3,  0,  1,  0],
            [2,  1,  2,  2,  1,  2,  0,  0,  1],
            [2,  1,  2,  2,  1,  2,  0,  0,  1],
            [3,  2,  2,  2,  1,  2,  0,  0,  0],
        ])),
        (9, np.array([ # swap facet
            [3,  0,  0,  0,  0,  1,  0,  0,  1],
            [0,  2,  0,  2,  1,  0,  0,  0,  1],
            [0,  1,  0,  0,  1,  2,  1,  0,  0],
            [0,  3,  0,  0,  0,  1,  0,  0,  1],
            [1,  1,  0,  1,  2,  0,  0,  0,  1],
            [1,  1,  0,  1,  0,  2,  0,  1,  0],
            [0,  1,  2,  0,  1,  0,  0,  1,  0],
            [1,  1,  0,  1,  0,  2,  0,  1,  0],
            [2,  2,  1,  1,  1,  1,  0,  0,  0],
        ])),
        (13, np.array([ # adder game
            [4,  0,  1,  1,  0,  2,  0,  0,  1],
            [1,  3,  0,  3,  0,  0,  0,  0,  1],
            [0,  0,  3,  0,  2,  1,  1,  0,  0],
            [2,  1,  1,  2,  0,  3,  0,  1,  0],
            [2,  1,  2,  2,  1,  2,  0,  0,  1],
            [2,  1,  2,  2,  1,  2,  0,  0,  1],
            [2,  1,  2,  2,  1,  2,  0,  0,  1],
            [2,  1,  2,  2,  1,  2,  0,  0,  1],
            [3,  2,  2,  2,  1,  2,  0,  0,  0],
        ])),
        (12, np.array([ # compare facet
            [3,  0,  0,  0,  2,  0,  0,  0,  1],
            [1,  0,  3,  2,  1,  2,  0,  0,  1],
            [1,  0,  3,  2,  1,  2,  0,  0,  1],
            [1,  0,  3,  2,  1,  2,  0,  0,  1],
            [1,  0,  3,  2,  1,  2,  0,  0,  1],
            [0,  2,  3,  1,  0,  3,  0,  0,  0],
            [1,  0,  3,  2,  1,  2,  0,  0,  1],
            [0,  0,  3,  3,  0,  2,  0,  1,  0],
            [2,  1,  3,  2,  1,  2,  0,  0,  0],
        ])),
        (9, np.array([ # conditioned permutation facett
            [3,  0,  0,  0,  0,  1,  0,  0,  1],
            [0,  3,  0,  0,  0,  1,  0,  0,  1],
            [0,  1,  2,  0,  1,  0,  0,  1,  0],
            [1,  1,  0,  1,  2,  0,  0,  0,  1],
            [1,  1,  0,  1,  0,  2,  0,  1,  0],
            [0,  2,  0,  2,  1,  0,  0,  0,  1],
            [1,  1,  1,  1,  1,  1,  0,  0,  1],
            [0,  1,  0,  0,  1,  2,  1,  0,  0],
            [2,  2,  1,  1,  1,  1,  0,  0,  0],
        ])),
        (11, np.array([ # same difference facet
            [2,  0,  0,  0,  2,  0,  0,  0,  1],
            [0,  1,  3,  1,  1,  2,  0,  0,  1],
            [0,  1,  3,  1,  1,  2,  0,  0,  1],
            [0,  1,  3,  1,  1,  2,  0,  0,  1],
            [0,  1,  3,  2,  0,  2,  0,  1,  0],
            [0,  1,  3,  1,  1,  2,  0,  0,  1],
            [0,  1,  3,  1,  1,  2,  0,  0,  1],
            [0,  1,  3,  1,  1,  2,  0,  0,  1],
            [1,  2,  3,  1,  1,  2,  0,  0,  0],
        ])),
        (9, np.array([ # cv facet
            [3,  0,  0,  0,  0,  1,  0,  0,  1],
            [0,  3,  0,  0,  0,  1,  0,  0,  1],
            [0,  1,  2,  0,  1,  0,  0,  1,  0],
            [0,  2,  0,  2,  1,  0,  0,  0,  1],
            [1,  1,  0,  1,  2,  0,  0,  0,  1],
            [1,  1,  0,  1,  0,  2,  0,  1,  0],
            [0,  1,  0,  0,  1,  2,  1,  0,  0],
            [1,  1,  0,  1,  0,  2,  0,  1,  0],
            [2,  2,  1,  1,  1,  1,  0,  0,  0],
        ])),
    ]

    game_names = ["mult0", "mult1", "swap", "adder", "compare", "perm", "diff", "cv"]

    return interference2_game_inequalities, interference2_facet_inequalities, game_names


def min_butterfly_33_33_network_bounds():
    min_butterfly_game_inequalities = [
        (7, np.array([ # multiplication with zero 
            [1, 1, 1, 1, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])),
        (6 , np.array([ # multiplication game [1,2,3] no zero mult1
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
        ])),
        (5, np.array([ # swap game
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
        ])),
        (5, np.array([ # adder game
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 1, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])),
        (7, np.array([ # compare game
            [1, 0, 0, 0, 1, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])),
        (5, np.array([ # on receiver permutes output based on other receiver
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 0],
        ])),
        (7, np.array([ # same difference game
            [1, 0, 0, 0, 1, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 1, 0, 0],
        ])),
        (5, np.eye(9)), # communication value
    ]

    min_butterfly_facet_inequalities = [
        (16, np.array([ # mult0
            [2,  2,  2,  2,  1,  0,  2,  0,  2],
            [1,  1,  1,  1,  2,  0,  1,  1,  2],
            [0,  0,  0,  0,  0,  2,  0,  2,  0],
            [1,  1,  1,  1,  1,  1,  2,  1,  2],
            [1,  2,  1,  1,  2,  0,  1,  0,  3],
            [1,  2,  1,  1,  1,  1,  1,  1,  2],
            [0,  0,  1,  1,  2,  0,  1,  0,  2],
            [1,  1,  1,  2,  2,  1,  2,  1,  2],
            [1,  2,  2,  2,  2,  1,  2,  1,  2],
        ])),
        (13, np.array([ # mult1
            [3,  0,  0,  1,  1,  0,  0,  0,  1],
            [0,  3,  0,  2,  0,  0,  0,  0,  1],
            [1,  1,  2,  1,  0,  0,  1,  1,  1],
            [2,  1,  0,  0,  1,  1,  0,  1,  1],
            [0,  2,  0,  1,  0,  1,  0,  1,  1],
            [1,  1,  1,  0,  0,  2,  1,  2,  0],
            [2,  0,  0,  1,  1,  1,  0,  1,  1],
            [0,  2,  0,  1,  1,  0,  0,  1,  1],
            [2,  2,  2,  1,  1,  1,  1,  1,  1],
        ])),
        (13, np.array([ # swap
            [2,  0,  0,  0,  1,  0,  0,  0,  1],
            [0,  0,  0,  2,  0,  0,  0,  0,  1],
            [0,  1,  0,  0,  1,  0,  2,  2,  1],
            [0,  2,  0,  1,  0,  0,  0,  0,  1],
            [0,  0,  0,  0,  2,  0,  0,  0,  1],
            [1,  0,  0,  1,  0,  0,  2,  2,  1],
            [0,  0,  2,  1,  1,  2,  0,  0,  1],
            [1,  1,  2,  0,  0,  2,  0,  0,  1],
            [1,  1,  2,  1,  1,  2,  2,  2,  0],
        ])),
        (10, np.array([  # adder
            [2,  0,  0,  0,  0,  2,  0,  1,  0],
            [0,  2,  0,  2,  1,  0,  0,  0,  1],
            [0,  1,  2,  1,  2,  1,  1,  0,  0],
            [2,  0,  0,  0,  0,  2,  0,  1,  0],
            [0,  2,  0,  1,  1,  1,  0,  0,  1],
            [0,  1,  2,  1,  1,  1,  1,  0,  0],
            [2,  0,  0,  0,  0,  2,  0,  1,  0],
            [0,  1,  0,  2,  1,  0,  0,  0,  1],
            [1,  1,  2,  1,  2,  1,  1,  0,  0],
        ])),
        (9, np.array([ # compare
            [2,  0,  0,  0,  2,  0,  0,  0,  1],
            [0,  0,  1,  1,  1,  1,  0,  1,  0],
            [1,  0,  0,  0,  1,  2,  1,  0,  0],
            [1,  0,  0,  0,  0,  2,  0,  0,  1],
            [0,  0,  1,  1,  0,  2,  0,  1,  0],
            [1,  1,  1,  0,  1,  2,  1,  0,  0],
            [1,  0,  0,  0,  1,  1,  0,  0,  1],
            [0,  0,  1,  2,  0,  1,  0,  1,  0],
            [1,  1,  1,  1,  1,  2,  1,  0,  0],
        ])),
        (10, np.array([ # perm
            [2,  0,  0,  1,  1,  1,  0,  0,  1],
            [0,  2,  0,  0,  0,  2,  1,  0,  0],
            [1,  0,  2,  1,  1,  1,  0,  1,  0],
            [1,  0,  0,  1,  2,  0,  0,  0,  1],
            [0,  2,  0,  0,  0,  2,  1,  0,  0],
            [1,  1,  2,  2,  1,  1,  0,  1,  0],
            [1,  0,  0,  1,  2,  0,  0,  0,  1],
            [0,  2,  0,  0,  0,  2,  1,  0,  0],
            [1,  1,  2,  2,  1,  1,  0,  1,  0],
        ])),
        (8, np.array([ # diff game
            [2,  0,  0,  0,  1,  0,  0,  0,  1],
            [1,  0,  0,  1,  0,  1,  0,  0,  1],
            [1,  0,  0,  0,  0,  1,  0,  0,  1],
            [1,  0,  0,  1,  0,  1,  0,  0,  1],
            [0,  0,  1,  2,  0,  1,  0,  1,  0],
            [0,  0,  1,  1,  0,  2,  0,  0,  0],
            [1,  0,  0,  0,  0,  1,  0,  0,  1],
            [0,  0,  1,  1,  0,  2,  0,  0,  0],
            [1,  1,  1,  1,  0,  2,  1,  0,  0],
        ])),
        (13, np.array([ # cv game
            [2,  0,  0,  0,  1,  0,  0,  0,  1],
            [0,  2,  0,  1,  0,  0,  0,  0,  1],
            [0,  0,  2,  1,  1,  2,  0,  0,  1],
            [0,  0,  0,  2,  0,  0,  0,  0,  1],
            [0,  0,  0,  0,  2,  0,  0,  0,  1],
            [1,  1,  2,  0,  0,  2,  0,  0,  1],
            [0,  1,  0,  0,  1,  0,  2,  2,  1],
            [1,  0,  0,  1,  0,  0,  2,  2,  1],
            [1,  1,  2,  1,  1,  2,  2,  2,  0],
        ])),
    ]

    game_names = ["mult0", "mult1", "swap", "adder", "compare", "perm", "diff", "cv"]
    
    return min_butterfly_game_inequalities, min_butterfly_facet_inequalities, game_names


def butterfly_33_33_network_bounds():
    butterfly_game_inequalities = [
        (7, np.array([ # multiplication with zero 
            [1, 1, 1, 1, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])),
        (6 , np.array([ # multiplication game [1,2,3] no zero mult1
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
        ])),
        (4, np.array([ # swap game
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
        ])),
        (6, np.array([ # adder game
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 1, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])),
        (7, np.array([ # compare game
            [1, 0, 0, 0, 1, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])),
        (6, np.array([ # on receiver permutes output based on other receiver
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 0],
        ])),
        (7, np.array([ # same difference game
            [1, 0, 0, 0, 1, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 1, 0, 0],
        ])),
        (7, np.eye(9)), # communication value
    ]
    
    butterfly_facet_inequalities = [
        (11, np.array([ # mult0 facet
            [1,  3,  1,  1,  0,  0,  1,  0,  0],
            [0,  0,  0,  1,  2,  0,  1,  0,  1],
            [0,  1,  0,  0,  0,  1,  0,  2,  0],
            [0,  2,  1,  0,  1,  1,  0,  1,  1],
            [0,  1,  0,  1,  2,  0,  0,  0,  2],
            [0,  2,  1,  1,  1,  1,  0,  1,  1],
            [0,  2,  1,  0,  1,  1,  0,  1,  1],
            [0,  0,  0,  1,  1,  0,  1,  0,  1],
            [1,  2,  1,  1,  1,  1,  1,  1,  1],
        ])),
        (11, np.array([ # mult1 facet
            [2,  0,  1,  1,  0,  0,  0,  0,  0],
            [0,  1,  1,  3,  0,  0,  0,  0,  0],
            [0,  0,  1,  1,  0,  0,  2,  0,  0],
            [1,  0,  1,  0,  1,  1,  0,  1,  0],
            [0,  1,  1,  1,  0,  2,  0,  1,  0],
            [0,  0,  1,  1,  0,  2,  0,  2,  0],
            [1,  1,  1,  1,  1,  1,  0,  0,  1],
            [0,  1,  0,  2,  1,  1,  1,  0,  1],
            [1,  1,  1,  2,  1,  1,  1,  1,  1],
        ])),
        (12, np.array([ # swap facet
            [2,  0,  1,  0,  0,  1,  0,  1,  0],
            [0,  0,  1,  2,  0,  1,  0,  1,  0],
            [1,  0,  1,  1,  1,  1,  1,  1,  1],
            [0,  2,  0,  0,  0,  1,  1,  0,  0],
            [0,  0,  1,  0,  2,  0,  1,  0,  0],
            [0,  1,  1,  1,  1,  1,  0,  1,  1],
            [0,  0,  3,  0,  0,  2,  0,  1,  0],
            [0,  0,  2,  0,  0,  3,  0,  1,  0],
            [1,  1,  2,  1,  1,  2,  1,  1,  1],
        ])),
        (10, np.array([ # adder facet
            [1,  0,  1,  0,  1,  1,  1,  1,  0],
            [0,  2,  0,  1,  0,  0,  0,  0,  2],
            [1,  1,  2,  0,  1,  1,  1,  1,  1],
            [0,  1,  1,  0,  0,  2,  1,  1,  0],
            [0,  1,  0,  0,  0,  0,  0,  0,  2],
            [0,  1,  2,  0,  0,  1,  1,  1,  1],
            [1,  0,  1,  0,  1,  1,  1,  1,  1],
            [0,  1,  0,  1,  0,  0,  0,  0,  2],
            [1,  1,  2,  0,  1,  1,  1,  1,  1],
        ])),
        (14, np.array([ # compare facet
            [3,  0,  0,  0,  2,  0,  1,  0, 1],
            [2,  1,  0,  0,  1,  0,  1,  1, 1],
            [2,  1,  1,  0,  0,  1,  0,  1, 0],
            [1,  1,  2,  0,  0,  2,  0,  1, 1],
            [0,  2,  2,  0,  0,  2,  0,  1, 1],
            [0,  3,  2,  0,  0,  3,  0,  0, 0],
            [1,  1,  2,  0,  1,  1,  1,  1, 0],
            [1,  2,  2,  1,  1,  1,  1,  1, 0],
            [2,  2,  3,  1,  1,  2,  1,  1, 0],
        ])),
        (20, np.array([ # conditioned permutation facet
            [2,  1,  0,  1,  3,  0,  1,  1,  2],
            [1,  5,  2,  0,  0,  2,  1,  1,  0],
            [0,  3,  3,  1,  3,  3,  0,  2,  0],
            [1,  2,  0,  1,  4,  0,  1,  0,  2],
            [0,  3,  1,  1,  1,  3,  1,  1,  0],
            [0,  3,  3,  2,  1,  2,  0,  1,  0],
            [1,  0,  0,  1,  3,  0,  1,  1,  1],
            [0,  3,  1,  0,  0,  2,  2,  1,  1],
            [2,  3,  3,  1,  3,  3,  1,  2,  0],
        ])),
        (12, np.array([  # same difference facet
            [3,  0,  0,  0,  2,  0,  0,  1,  1],
            [1,  0,  0,  1,  1,  0,  0,  1,  1],
            [2,  0,  0,  0,  1,  0,  0,  0,  1],
            [2,  0,  1,  0,  0,  2,  0,  1,  0],
            [1,  0,  1,  2,  0,  1,  0,  2,  0],
            [2,  1,  1,  1,  1,  2,  0,  1,  0],
            [1,  0,  0,  0,  0,  1,  0,  1,  1],
            [0,  0,  1,  1,  0,  2,  0,  1,  1],
            [2,  1,  2,  1,  1,  2,  1,  1,  0],
        ])),
        (18, np.array([ # cv facet
            [3,  0,  1,  0,  3,  1,  0,  0,  0],
            [1,  3,  0,  0,  3,  1,  0,  0,  0],
            [0,  0,  3,  0,  4,  1,  0,  0,  1],
            [1,  0,  1,  3,  2,  1,  0,  0,  0],
            [3,  1,  1,  1,  3,  0,  0,  0,  0],
            [3,  1,  2,  0,  0,  2,  0,  0,  1],
            [0,  0,  1,  0,  3,  1,  2,  1,  1],
            [2,  0,  1,  0,  0,  1,  2,  1,  1],
            [4,  1,  2,  1,  4,  1,  1,  0,  0],
        ])),
    ]

    game_names = ["mult0", "mult1", "swap", "adder", "compare", "perm", "diff", "cv"]
    
    return butterfly_game_inequalities, butterfly_facet_inequalities, game_names

def mac_33_22_9_network_bounds():
    mac_game_inequalities = [
        (7, np.array([ # multiplication with zero 
            [1, 1, 1, 1, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])),
        (5 , np.array([ # multiplication game [1,2,3] no zero mult1
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
        ])),
        (4, np.array([ # swap game
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
        ])),
        (5, np.array([ # adder game
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 1, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])),
        (7, np.array([ # compare game
            [1, 0, 0, 0, 1, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])),
        (4, np.array([ # one receiver permutes output based on other receiver
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 0],
        ])),
        (7, np.array([ # same difference game
            [1, 0, 0, 0, 1, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 1, 0, 0],
        ])),
        (4, np.eye(9)), # communication value
    ]
    
    mac_facet_inequalities = [
        (10, np.array([ # mult zero face
            [0,  2,  1,  2,  0,  0,  0,  0,  1],
            [0,  0,  0,  0,  3,  0,  0,  0,  2],
            [0,  0,  0,  0,  1,  2,  0,  2,  0],
            [0,  0,  0,  0,  3,  0,  0,  0,  2],
            [0,  0,  0,  0,  3,  0,  0,  0,  2],
            [0,  0,  0,  0,  3,  0,  0,  0,  2],
            [0,  0,  0,  0,  3,  0,  0,  0,  2],
            [0,  0,  0,  0,  3,  0,  0,  0,  2],
            [0,  1,  1,  1,  2,  1,  1,  1,  1],
        ])),
        (10, np.array([ # mult 1 facet
            [2,  0,  0,  0,  2,  0,  0,  0,  2],
            [0,  2,  0,  2,  0,  0,  0,  0,  2],
            [0,  0,  2,  0,  2,  0,  2,  0,  0],
            [2,  0,  0,  0,  2,  0,  0,  0,  2],
            [2,  0,  0,  0,  2,  0,  0,  0,  2],
            [2,  0,  0,  0,  0,  2,  0,  2,  0],
            [2,  0,  0,  0,  2,  0,  0,  0,  2],
            [2,  0,  0,  0,  2,  0,  0,  0,  2],
            [1,  1,  1,  1,  1,  1,  1,  1,  1],
        ])),
        (10, np.array([ # swap facet
            [2,  0,  0,  0,  2,  0,  0,  0,  2],
            [0,  2,  0,  2,  0,  0,  0,  0,  2],
            [0,  2,  0,  0,  0,  2,  2,  0,  0],
            [0,  2,  0,  2,  0,  0,  0,  0,  2],
            [2,  0,  0,  0,  2,  0,  0,  0,  2],
            [2,  0,  0,  0,  0,  2,  0,  2,  0],
            [0,  0,  2,  2,  0,  0,  0,  2,  0],
            [2,  0,  0,  0,  0,  2,  0,  2,  0],
            [1,  1,  1,  1,  1,  1,  1,  1,  1],
        ])),
        (10, np.array([ # adder facet
            [2,  0,  0,  0,  2,  0,  0,  0,  2],
            [0,  2,  0,  2,  0,  0,  0,  0,  2],
            [0,  0,  2,  0,  2,  0,  2,  0,  0],
            [2,  0,  0,  0,  0,  2,  0,  2,  0],
            [2,  0,  0,  0,  2,  0,  0,  0,  2],
            [2,  0,  0,  0,  2,  0,  0,  0,  2],
            [2,  0,  0,  0,  2,  0,  0,  0,  2],
            [2,  0,  0,  0,  2,  0,  0,  0,  2],
            [1,  1,  1,  1,  1,  1,  1,  1,  1],
        ])),
        (9, np.array([ # compare facet
            [2,  0,  0,  0,  2,  0,  0,  0,  1],
            [1,  1,  0,  1,  0,  1,  0,  1,  1],
            [1,  1,  0,  1,  0,  1,  0,  1,  1],
            [1,  1,  0,  1,  0,  1,  0,  1,  1],
            [1,  1,  0,  1,  0,  1,  0,  1,  1],
            [0,  2,  0,  0,  0,  2,  1,  0,  0],
            [1,  1,  0,  1,  0,  1,  0,  1,  1],
            [0,  0,  1,  2,  0,  0,  0,  2,  0],
            [1,  1,  1,  1,  1,  1,  1,  1,  0],
        ])),
        (10, np.array([ # conditioned permutation facet
            [2,  0,  0,  0,  2,  0,  0,  0,  2],
            [0,  2,  0,  1,  0,  0,  1,  0,  2],
            [0,  0,  2,  1,  1,  0,  1,  1,  0],
            [1,  0,  0,  0,  2,  0,  1,  0,  2],
            [1,  1,  0,  0,  0,  2,  1,  1,  0],
            [0,  2,  0,  2,  0,  0,  0,  0,  2],
            [1,  0,  0,  0,  2,  0,  1,  0,  2],
            [0,  1,  1,  0,  1,  1,  2,  0,  1],
            [1,  1,  1,  1,  1,  1,  1,  1,  1],
        ])),
        (9, np.array([ # same difference facet
            [2,  0,  0,  0,  2,  0,  0,  0,  1],
            [1,  0,  1,  1,  0,  2,  0,  0,  1],
            [1,  0,  1,  1,  0,  2,  0,  0,  1],
            [1,  0,  1,  1,  0,  2,  0,  0,  1],
            [0,  0,  1,  2,  0,  1,  0,  1,  0],
            [1,  0,  1,  1,  0,  2,  0,  0,  1],
            [1,  0,  1,  1,  0,  2,  0,  0,  1],
            [1,  0,  1,  1,  0,  2,  0,  0,  1],
            [1,  1,  1,  1,  1,  2,  1,  0,  0],
        ])),
        (10, np.array([ # cv facet
            [2,  0,  0,  0,  2,  0,  0,  0,  2],
            [0,  2,  0,  2,  0,  0,  0,  0,  2],
            [0,  0,  2,  2,  0,  0,  0,  2,  0],
            [0,  2,  0,  2,  0,  0,  0,  0,  2],
            [2,  0,  0,  0,  2,  0,  0,  0,  2],
            [2,  0,  0,  0,  0,  2,  0,  2,  0],
            [0,  2,  0,  0,  0,  2,  2,  0,  0],
            [2,  0,  0,  0,  0,  2,  0,  2,  0],
            [1,  1,  1,  1,  1,  1,  1,  1,  1],
        ])),
    ]

    game_names = ["mult0", "mult1", "swap", "adder", "compare", "perm", "diff", "cv"]

    return mac_game_inequalities, mac_facet_inequalities, game_names

def broadcast_4_22_44_network_bounds():
    bc_facet_inequalities = [
        (2, np.array([ # correlated communication value
            [1,0,0,0],
            [0,1,0,0],
            [0,0,0,0],
            [0,0,0,0],
            [0,1,0,0],
            [1,0,0,0],
            [0,0,0,0],
            [0,0,0,0],
            [0,0,0,0],
            [0,0,0,0],
            [0,0,1,0],
            [0,0,0,1],
            [0,0,0,0],
            [0,0,0,0],
            [0,0,0,1],
            [0,0,1,0],
        ])),
        (8, np.array(  # derived from PR-box-asissted receiver CHSH violation
            [
                [3,0,0,0],
                [0,3,0,0],
                [0,0,0,3],
                [1,1,0,2],
                [1,1,0,2],
                [1,1,0,2],
                [2,1,0,2],
                [1,3,0,2],
                [1,0,2,0],
                [0,1,2,0],
                [0,0,0,3],
                [1,1,0,2],
                [2,1,0,2],
                [1,2,0,2],
                [1,1,1,2],
                [2,2,1,2],
            ]
        )),
        (2, np.array([
            [1,0,0,0],
            [0,0,0,0],
            [0,0,0,0],
            [0,0,0,0],
            [0,0,0,0],
            [0,1,0,0],
            [0,0,0,0],
            [0,0,0,0],
            [0,0,0,0],
            [0,0,0,0],
            [0,0,1,0],
            [0,0,0,0],
            [0,0,0,0],
            [0,0,0,0],
            [0,0,0,0],
            [0,0,0,1],
        ])),
    ]

    return bc_facet_inequalities

def broadcast_9_22_33_network_bounds():
    bc_game_inequalities = [
        (7, np.array([ # multiplication with zero 
            [1, 1, 1, 1, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])),
        (6, np.array([ # multiplication game [1,2,3] no zero mult1
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
        ])),
        (4, np.array([ # swap game
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 0],
            [0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
        ])),
        (6, np.array([ # adder game
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 1, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])),
        (6, np.array([ # compare game
            [1, 0, 0, 0, 1, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
        ])),
        (4, np.array([ # one receiver permutes output based on other receiver
            [1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 0],
            [0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 1, 0],
        ])),
        (7, np.array([ # same difference game
            [1, 0, 0, 0, 1, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 1, 0, 1, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 1, 0, 0],
        ])),
        (4, np.eye(9)), # communication value
    ]
    
    bc_facet_inequalities = [
        (5, np.array([ # mult zero face
            [1,  0,  0,  1,  0,  0,  0,  0,  0],
            [0,  0,  0,  0,  2,  0,  0,  0,  0],
            [0,  0,  0,  0,  0,  2,  0,  0,  0],
            [1,  0,  0,  0,  0,  0,  0,  0,  1],
            [0,  0,  0,  0,  1,  0,  0,  0,  1],
            [0,  0,  0,  0,  0,  2,  0,  0,  1],
            [1,  0,  0,  0,  1,  1,  0,  0,  0],
            [1,  0,  0,  0,  1,  1,  0,  0,  0],
            [1,  0,  0,  0,  1,  2,  0,  0,  0],
        ])),
        (5, np.array([ # mult 1 facet
            [2,  0,  0,  0,  0,  0,  0,  0,  0],
            [0,  2,  0,  0,  0,  0,  0,  0,  0],
            [0,  0,  2,  0,  0,  0,  0,  0,  0],
            [1,  0,  0,  0,  0,  1,  0,  0,  0],
            [0,  1,  0,  0,  0,  1,  0,  0,  0],
            [0,  0,  2,  0,  0,  1,  0,  0,  0],
            [1,  1,  1,  0,  0,  0,  0,  0,  0],
            [1,  1,  1,  0,  0,  0,  0,  0,  0],
            [1,  1,  2,  0,  0,  0,  0,  0,  0],
        ])),
        (6, np.array([ # swap facet
            [2,  0,  0,  0,  0,  0,  0,  0,  0],
            [1,  0,  0,  1,  0,  0,  0,  0,  0],
            [1,  1,  2,  0,  0,  0,  0,  0,  0],
            [0,  2,  0,  0,  0,  0,  0,  0,  0],
            [0,  1,  0,  0,  1,  0,  0,  0,  0],
            [1,  1,  2,  0,  0,  0,  0,  0,  0],
            [0,  0,  3,  0,  0,  0,  0,  0,  0],
            [0,  0,  3,  0,  0,  0,  0,  0,  0],
            [1,  1,  3,  0,  0,  0,  0,  0,  0],
        ])),
        (6, np.array([ # adder facet
            [2,  0,  0,  0,  0,  0,  0,  0,  0],
            [0,  1,  0,  1,  0,  0,  0,  0,  0],
            [0,  0,  3,  0,  0,  0,  0,  0,  0],
            [1,  0,  0,  0,  0,  1,  0,  0,  0],
            [0,  1,  0,  0,  0,  0,  0,  0,  1],
            [0,  0,  3,  0,  0,  0,  0,  0,  0],
            [1,  1,  2,  0,  0,  0,  0,  0,  0],
            [1,  1,  2,  0,  0,  0,  0,  0,  0],
            [1,  1,  3,  0,  0,  0,  0,  0,  0],
        ])),
        (4, np.array([ # compare facet
            [1,  0,  0,  0,  0,  0,  0,  0,  0],
            [0,  0,  0,  2,  0,  0,  0,  0,  0],
            [0,  2,  0,  0,  0,  0,  0,  0,  0],
            [0,  0,  0,  0,  0,  0,  0,  0,  1],
            [0,  0,  0,  2,  0,  0,  0,  0,  0],
            [0,  2,  0,  0,  0,  0,  0,  0,  0],
            [0,  1,  0,  1,  0,  0,  0,  0,  0],
            [0,  1,  0,  2,  0,  0,  0,  0,  0],
            [0,  2,  0,  1,  0,  0,  0,  0,  0],
        ])),
        (6, np.array([ # conditioned permutation facet
            [2,  0,  0,  0,  0,  0,  0,  0,  0],
            [0,  2,  0,  0,  0,  0,  0,  0,  0],
            [0,  0,  3,  0,  0,  0,  0,  0,  0],
            [1,  0,  0,  0,  1,  0,  0,  0,  0],
            [0,  1,  0,  0,  0,  1,  0,  0,  0],
            [0,  0,  3,  0,  0,  0,  0,  0,  0],
            [1,  1,  2,  0,  0,  0,  0,  0,  0],
            [1,  1,  2,  0,  0,  0,  0,  0,  0],
            [1,  1,  3,  0,  0,  0,  0,  0,  0],
        ])),
        (5, np.array([ # same difference facet
            [1,  0,  0,  0,  1,  0,  0,  0,  0],
            [0,  0,  0,  0,  0,  0,  0,  0,  1],
            [0,  0,  2,  0,  0,  0,  0,  0,  0],
            [0,  0,  0,  0,  0,  0,  0,  0,  1],
            [0,  2,  0,  0,  0,  0,  0,  0,  0],
            [0,  0,  2,  0,  0,  0,  0,  0,  0],
            [0,  0,  2,  0,  0,  0,  0,  0,  0],
            [0,  0,  2,  0,  0,  0,  0,  0,  0],
            [1,  1,  2,  0,  0,  0,  0,  0,  0],
        ])),
        (6, np.array([ # cv facet
            [2,  0,  0,  0,  0,  0,  0,  0,  0],
            [0,  2,  0,  0,  0,  0,  0,  0,  0],
            [0,  0,  3,  0,  0,  0,  0,  0,  0],
            [1,  0,  0,  1,  0,  0,  0,  0,  0],
            [0,  1,  0,  0,  1,  0,  0,  0,  0],
            [0,  0,  3,  0,  0,  0,  0,  0,  0],
            [1,  1,  2,  0,  0,  0,  0,  0,  0],
            [1,  1,  2,  0,  0,  0,  0,  0,  0],
            [1,  1,  3,  0,  0,  0,  0,  0,  0],
        ])),
    ]

    game_names = ["mult0", "mult1", "swap", "adder", "compare", "perm", "diff", "cv"]

    return bc_game_inequalities, bc_facet_inequalities, game_names


def rac_game(n):
    X = 2**n
    Y = n

    game = np.zeros((2, X*Y))
    col_id = 0
    for x in range(X):
        for y in range(Y):
            bin_string = [int(i) for i in np.binary_repr(x, width=n)]

            row_id = bin_string[y]
            game[row_id, col_id] = 1

            col_id += 1

    # https://arxiv.org/abs/0810.2937 (Eq. 25) 
    multiplier = n * 2**n
    bound = multiplier * (1/2 + 1 / (2**n) * math.comb(n-1, int(np.floor((n-1)/2))))

    return (bound, game)


def multiaccess_33_23_2_bounds():
    return [
        (4, np.array([
            [0,  0,  0,  0,  1,  0,  1,  0,  0],
            [1,  1,  0,  1,  0,  0,  0,  0,  0],
        ])),
        (7, np.array([
            [0, 0, 1, 0, 1, 0, 1, 0, 0],
            [1, 1, 0, 1, 0, 1, 0, 1, 1],
        ])),
        (5, np.array([
            [0, 0, 0, 0, 1, 0, 1, 0, 1],
            [1, 1, 0, 0, 0, 1, 0, 0, 0],
        ])),
        (5, np.array([
            [0, 0, 1, 0, 1, 0, 1, 0, 0],
            [1, 0, 0, 0, 0, 1, 0, 1, 0],
        ])),
        (7, np.array([
            [0, 0, 0, 0, 1, 1, 1, 0, 1],
            [1, 1, 1, 1, 0, 0, 0, 1, 0],
        ])),
    ]

def multiaccess_33_32_2_bounds():
    return [
        (4, np.array([
            [0,  0,  1, 0,  1,  0,  0,  0,  0],
            [1,  1,  0, 1,  0,  0,  0,  0,  0],
        ])),
        (7, np.array([
            [0, 0, 1, 0, 1, 0, 1, 0, 0],
            [1, 1, 0, 1, 0, 1, 0, 1, 1],
        ])),
        (5, np.array([
            [0, 0, 1, 0, 1, 0, 0, 0, 1],
            [1, 0, 0, 1, 0, 0, 0, 1, 0],
        ])),
        (5, np.array([
            [0, 0, 1, 0, 1, 0, 1, 0, 0],
            [1, 0, 0, 0, 0, 1, 0, 1, 0],
        ])),
        (7, np.array([
            [0, 0, 1, 0, 1, 0, 0, 1, 1],
            [1, 1, 0, 1, 0, 1, 1, 0, 0],
        ])),
    ]

def multiaccess_twotrit_witnesses():
    return [
        (6, np.array([
            [0,  0,  0,  0,  1,  0,  1,  0,  0],
            [1,  1,  0,  1,  0,  1,  0,  0,  1],
        ])),
        (7, np.array([
            [1, 0, 0, 0, 1, 0, 0, 0, 1],
            [0, 1, 1, 1, 0, 1, 1, 1, 0],
        ])),
        (5, np.array([
            [0, 0, 1, 0, 1, 0, 1, 0, 0],
            [1, 1, 0, 1, 0, 0, 0, 0, 0],
        ])),
        (5, np.array([
            [0, 0, 1, 0, 1, 0, 1, 0, 0],
            [1, 0, 0, 0, 0, 1, 0, 1, 0],
        ])),
        (9, np.array([
            [0, 0, 2, 0, 1, 0, 2, 0, 0],
            [2, 1, 0, 1, 0, 1, 0, 1, 0],
        ])),
        (11, np.array([
            [0, 0, 1, 1, 0, 0, 2, 0, 2],
            [2, 1, 0, 0, 1, 2, 0, 1, 0],
        ])),
        (11, np.array([
            [0, 1, 2, 0, 0, 0, 1, 0, 2],
            [2, 0, 0, 1, 1, 1, 0, 2, 0],
        ])),
    ]

def prepare_and_measure_inequalities():
    return [
        (4, np.array([ # 3 input dimensionality witness
            [0,  0,  0,  1,  1,  0],
            [1,  1,  1,  0,  0,  0],
        ])),
        (7, np.array([  # finger printing 33-23-2 tight 
            [1,0,0,0,1,0,0,0,1],
            [0,1,1,1,0,1,1,1,0],
        ])),
        (5, np.array([ # 33-23-2 facet 
            [0, 0, 1, 0, 1, 0, 0, 0, 1],
            [1, 0, 0, 1, 0, 0, 0, 1, 0],
        ])),
        (5, np.array([ # 33-23-2 facet
            [0, 0, 1, 0, 1, 0, 1, 0, 0],
            [1, 0, 0, 0, 0, 1, 0, 1, 0],
        ])),
        (7, np.array([ # 33-23-2 facet
            [0, 0, 1, 0, 1, 0, 0, 1, 1],
            [1, 1, 0, 1, 0, 1, 1, 0, 0],
        ])),
        rac_game(2), # 2-bit rac
        rac_game(3), # 3-bit rac (not tight)
        (8, np.array([  # 8-input dimensionality witness derived from 3-bit RAC
            [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0],
        ])),  
    ]
